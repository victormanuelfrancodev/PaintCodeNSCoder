//
//  UIButtonStyle.swift
//  ProjectName
//
//  Created by Victor  on 6/11/18.
//  Copyright Â© 2018 Victor. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class UIButtonStyle : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawMyButtonStyle(frameButton: CGRect = CGRect(x: 22, y: 26, width: 202, height: 54), titleColor: UIColor = UIColor(red: 0.976, green: 0.976, blue: 0.976, alpha: 1.000), rehileteMove: CGFloat = 0, titleText: String = "Hello, World!") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }

        //// Color Declarations
        let blue = UIColor(red: 0.811, green: 0.851, blue: 1.000, alpha: 1.000)
        let green = UIColor(red: 0.750, green: 0.984, blue: 0.758, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradient(colorsSpace: nil, colors: [green.cgColor, green.blended(withFraction: 0.5, of: blue).cgColor, blue.cgColor] as CFArray, locations: [0, 0.01, 1])!


        //// Subframes
        let frameRehilete = CGRect(x: frameButton.minX + 154, y: frameButton.minY + 9, width: frameButton.width - 174, height: frameButton.height - 19)


        //// Button Drawing
        let buttonRect = CGRect(x: frameButton.minX + fastFloor(frameButton.width * 0.00000 + 0.5), y: frameButton.minY + fastFloor(frameButton.height * 0.00000 + 0.5), width: fastFloor(frameButton.width * 1.00000 + 0.5) - fastFloor(frameButton.width * 0.00000 + 0.5), height: fastFloor(frameButton.height * 1.00000 + 0.5) - fastFloor(frameButton.height * 0.00000 + 0.5))
        let buttonPath = UIBezierPath(roundedRect: buttonRect, cornerRadius: 20)
        context.saveGState()
        buttonPath.addClip()
        context.drawLinearGradient(gradient,
            start: CGPoint(x: buttonRect.minX, y: buttonRect.midY),
            end: CGPoint(x: buttonRect.maxX, y: buttonRect.midY),
            options: [])
        context.restoreGState()


        //// Title Drawing
        let titleRect = CGRect(x: frameButton.minX + 16, y: frameButton.minY + 12, width: 108, height: frameButton.height - 24)
        let titleStyle = NSMutableParagraphStyle()
        titleStyle.alignment = .left
        let titleFontAttributes = [
            .font: UIFont(name: "Avenir-Medium", size: 17)!,
            .foregroundColor: titleColor,
            .paragraphStyle: titleStyle,
        ] as [NSAttributedStringKey: Any]

        let titleTextHeight: CGFloat = titleText.boundingRect(with: CGSize(width: titleRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: titleFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: titleRect)
        titleText.draw(in: CGRect(x: titleRect.minX, y: titleRect.minY + (titleRect.height - titleTextHeight) / 2, width: titleRect.width, height: titleTextHeight), withAttributes: titleFontAttributes)
        context.restoreGState()


        //// Rehilete Drawing
        context.saveGState()
        context.translateBy(x: frameRehilete.minX + 0.50001 * frameRehilete.width, y: frameRehilete.minY + 0.48566 * frameRehilete.height)
        context.rotate(by: -rehileteMove * CGFloat.pi/180)

        let rehileteRect = CGRect(x: -13, y: -13, width: 26, height: 26)
        context.saveGState()
        context.clip(to: rehileteRect)
        context.translateBy(x: rehileteRect.minX, y: rehileteRect.minY)

        UIButtonStyle.drawCanvas1(frame: CGRect(origin: .zero, size: rehileteRect.size), resizing: .stretch)
        context.restoreGState()

        context.restoreGState()
    }

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 26, height: 26), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 26, height: 26), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 26, y: resizedFrame.height / 26)


        //// Color Declarations
        let fillColor3 = UIColor(red: 0.992, green: 0.235, blue: 0.396, alpha: 1.000)
        let fillColor4 = UIColor(red: 0.898, green: 0.000, blue: 0.153, alpha: 1.000)
        let fillColor5 = UIColor(red: 0.792, green: 0.910, blue: 0.976, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.067, green: 0.678, blue: 0.580, alpha: 1.000)
        let fillColor8 = UIColor(red: 0.996, green: 0.659, blue: 0.196, alpha: 1.000)
        let fillColor9 = UIColor(red: 0.996, green: 0.859, blue: 0.255, alpha: 1.000)
        let fillColor10 = UIColor(red: 0.400, green: 0.741, blue: 0.129, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.596, green: 0.831, blue: 0.000, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.098, green: 0.871, blue: 0.757, alpha: 1.000)
        let fillColor13 = UIColor(red: 0.718, green: 0.878, blue: 0.965, alpha: 1.000)

        //// pinwheel.svg Group
        context.saveGState()
        context.translateBy(x: 13, y: 13)



        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: -6.63, y: -6.63))
        bezierPath.addLine(to: CGPoint(x: -12.65, y: -0.67))
        bezierPath.addLine(to: CGPoint(x: -1.57, y: -0.31))
        bezierPath.addLine(to: CGPoint(x: -1.52, y: -2.9))
        bezierPath.addLine(to: CGPoint(x: -6.63, y: -6.63))
        bezierPath.close()
        fillColor7.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 0.67, y: -12.65))
        bezier2Path.addLine(to: CGPoint(x: 0.39, y: -1.82))
        bezier2Path.addLine(to: CGPoint(x: 2.23, y: -1.95))
        bezier2Path.addLine(to: CGPoint(x: 6.63, y: -6.63))
        bezier2Path.addLine(to: CGPoint(x: 0.67, y: -12.65))
        bezier2Path.close()
        fillColor8.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 0.67, y: -12.65))
        bezier3Path.addCurve(to: CGPoint(x: -0, y: -13), controlPoint1: CGPoint(x: 0.51, y: -12.76), controlPoint2: CGPoint(x: 0.41, y: -13))
        bezier3Path.addLine(to: CGPoint(x: -12.24, y: -13))
        bezier3Path.addCurve(to: CGPoint(x: -12.94, y: -12.53), controlPoint1: CGPoint(x: -12.55, y: -13), controlPoint2: CGPoint(x: -12.82, y: -12.81))
        bezier3Path.addCurve(to: CGPoint(x: -12.78, y: -11.7), controlPoint1: CGPoint(x: -13.06, y: -12.24), controlPoint2: CGPoint(x: -12.99, y: -11.92))
        bezier3Path.addLine(to: CGPoint(x: -2.69, y: -1.62))
        bezier3Path.addLine(to: CGPoint(x: -1.25, y: -1.71))
        bezier3Path.addLine(to: CGPoint(x: 0.39, y: -1.82))
        bezier3Path.addLine(to: CGPoint(x: 0.72, y: -2.81))
        bezier3Path.addCurve(to: CGPoint(x: 0.67, y: -12.65), controlPoint1: CGPoint(x: 2.41, y: -7.86), controlPoint2: CGPoint(x: 0.78, y: -11.92))
        bezier3Path.close()
        fillColor9.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 1.94, y: 0.44))
        bezier4Path.addLine(to: CGPoint(x: 2.19, y: 2.78))
        bezier4Path.addLine(to: CGPoint(x: 6.63, y: 6.63))
        bezier4Path.addLine(to: CGPoint(x: 12.65, y: 0.67))
        bezier4Path.addLine(to: CGPoint(x: 1.94, y: 0.44))
        bezier4Path.close()
        fillColor4.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 12.53, y: -12.94))
        bezier5Path.addCurve(to: CGPoint(x: 11.7, y: -12.77), controlPoint1: CGPoint(x: 12.25, y: -13.06), controlPoint2: CGPoint(x: 11.92, y: -12.99))
        bezier5Path.addLine(to: CGPoint(x: 1.62, y: -2.69))
        bezier5Path.addLine(to: CGPoint(x: 1.77, y: -1.23))
        bezier5Path.addLine(to: CGPoint(x: 1.94, y: 0.44))
        bezier5Path.addCurve(to: CGPoint(x: 7.62, y: 1.5), controlPoint1: CGPoint(x: 2.42, y: 0.56), controlPoint2: CGPoint(x: 4.51, y: 1.5))
        bezier5Path.addCurve(to: CGPoint(x: 12.65, y: 0.67), controlPoint1: CGPoint(x: 10.36, y: 1.5), controlPoint2: CGPoint(x: 12.5, y: 0.7))
        bezier5Path.addCurve(to: CGPoint(x: 13, y: 0), controlPoint1: CGPoint(x: 12.77, y: 0.51), controlPoint2: CGPoint(x: 13, y: 0.41))
        bezier5Path.addCurve(to: CGPoint(x: 13, y: -12.24), controlPoint1: CGPoint(x: 13, y: -0.31), controlPoint2: CGPoint(x: 13, y: -12.63))
        bezier5Path.addCurve(to: CGPoint(x: 12.53, y: -12.94), controlPoint1: CGPoint(x: 13, y: -12.54), controlPoint2: CGPoint(x: 12.81, y: -12.82))
        bezier5Path.close()
        fillColor3.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -1.9, y: 1.77))
        bezier6Path.addLine(to: CGPoint(x: -6.63, y: 6.63))
        bezier6Path.addLine(to: CGPoint(x: -0.67, y: 12.65))
        bezier6Path.addLine(to: CGPoint(x: -0.36, y: 1.72))
        bezier6Path.addLine(to: CGPoint(x: -1.9, y: 1.77))
        bezier6Path.close()
        fillColor10.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 12.78, y: 11.7))
        bezier7Path.addLine(to: CGPoint(x: 2.69, y: 1.62))
        bezier7Path.addLine(to: CGPoint(x: 1.26, y: 1.66))
        bezier7Path.addLine(to: CGPoint(x: -0.36, y: 1.72))
        bezier7Path.addLine(to: CGPoint(x: -0.72, y: 2.81))
        bezier7Path.addCurve(to: CGPoint(x: -0.67, y: 12.65), controlPoint1: CGPoint(x: -2.41, y: 7.86), controlPoint2: CGPoint(x: -0.78, y: 11.92))
        bezier7Path.addCurve(to: CGPoint(x: 0, y: 13), controlPoint1: CGPoint(x: -0.51, y: 12.76), controlPoint2: CGPoint(x: -0.41, y: 13))
        bezier7Path.addCurve(to: CGPoint(x: 12.24, y: 13), controlPoint1: CGPoint(x: 0.31, y: 13), controlPoint2: CGPoint(x: 12.63, y: 13))
        bezier7Path.addCurve(to: CGPoint(x: 12.94, y: 12.53), controlPoint1: CGPoint(x: 12.55, y: 13), controlPoint2: CGPoint(x: 12.82, y: 12.81))
        bezier7Path.addCurve(to: CGPoint(x: 12.78, y: 11.7), controlPoint1: CGPoint(x: 13.06, y: 12.24), controlPoint2: CGPoint(x: 12.99, y: 11.92))
        bezier7Path.close()
        fillColor11.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: -2.81, y: -0.72))
        bezier8Path.addCurve(to: CGPoint(x: -12.65, y: -0.67), controlPoint1: CGPoint(x: -7.86, y: -2.41), controlPoint2: CGPoint(x: -11.92, y: -0.78))
        bezier8Path.addCurve(to: CGPoint(x: -13, y: 0), controlPoint1: CGPoint(x: -12.77, y: -0.51), controlPoint2: CGPoint(x: -13, y: -0.41))
        bezier8Path.addLine(to: CGPoint(x: -13, y: 12.24))
        bezier8Path.addCurve(to: CGPoint(x: -12.53, y: 12.94), controlPoint1: CGPoint(x: -13, y: 12.54), controlPoint2: CGPoint(x: -12.81, y: 12.82))
        bezier8Path.addCurve(to: CGPoint(x: -12.24, y: 13), controlPoint1: CGPoint(x: -12.44, y: 12.98), controlPoint2: CGPoint(x: -12.34, y: 13))
        bezier8Path.addCurve(to: CGPoint(x: -11.7, y: 12.77), controlPoint1: CGPoint(x: -12.04, y: 13), controlPoint2: CGPoint(x: -11.85, y: 12.92))
        bezier8Path.addLine(to: CGPoint(x: -1.62, y: 2.69))
        bezier8Path.addLine(to: CGPoint(x: -1.59, y: 1.29))
        bezier8Path.addLine(to: CGPoint(x: -1.57, y: -0.31))
        bezier8Path.addLine(to: CGPoint(x: -2.81, y: -0.72))
        bezier8Path.close()
        fillColor12.setFill()
        bezier8Path.fill()


        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: -4, y: -4.1, width: 8.1, height: 7.9))
        fillColor5.setFill()
        ovalPath.fill()


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: -2, y: -2, width: 4.1, height: 3.9))
        fillColor13.setFill()
        oval2Path.fill()


        //// Group 2


        //// Group 3


        //// Group 4


        //// Group 5


        //// Group 6


        //// Group 7


        //// Group 8


        //// Group 9


        //// Group 10


        //// Group 11


        //// Group 12


        //// Group 13


        //// Group 14


        //// Group 15


        //// Group 16



        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(UIButtonStyleResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}



private extension UIColor {
    func blended(withFraction fraction: CGFloat, of color: UIColor) -> UIColor {
        var r1: CGFloat = 1, g1: CGFloat = 1, b1: CGFloat = 1, a1: CGFloat = 1
        var r2: CGFloat = 1, g2: CGFloat = 1, b2: CGFloat = 1, a2: CGFloat = 1

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
